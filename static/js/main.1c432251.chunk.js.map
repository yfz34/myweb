{"version":3,"sources":["components/nav/nav.js","App.js","serviceWorker.js","index.js"],"names":["SliderBar","className","href","useStyles","makeStyles","theme","root","flexGrow","position","top","width","menuButton","marginRight","spacing","title","between","App","classes","id","AppBar","Toolbar","Typography","variant","role","aria-label","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAuBeA,MAnBf,WACE,OACE,kBAAC,QAAD,KACE,uBAAGC,UAAU,YAAYC,KAAK,KAA9B,gBAIA,uBAAGD,UAAU,YAAYC,KAAK,UAA9B,gBAIA,uBAAGD,UAAU,YAAYC,KAAK,QAA9B,kB,gCCDAC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,SAAU,QACVC,IAAK,EACLC,MAAO,QAETC,WAAY,CACVC,YAAaP,EAAMQ,QAAQ,IAE7BC,MAAO,CACLP,SAAU,GAEZQ,QAAQ,OAoCKC,MA/Bf,WACE,IAAMC,EAAUd,IAChB,OACE,yBAAKe,GAAG,OACN,kBAAC,EAAD,MAEA,yBAAKjB,UAAWgB,EAAQX,MACxB,kBAACa,EAAA,EAAD,CAAQX,SAAS,UACf,kBAACY,EAAA,EAAD,CAASnB,UAAWgB,EAAQF,SAI1B,kBAACM,EAAA,EAAD,CAAYC,QAAQ,KAAKrB,UAAWgB,EAAQH,OAC5C,0BAAMS,KAAK,MAAMC,aAAW,UAA5B,gBADA,SACoD,0BAAMD,KAAK,MAAMC,aAAW,UAA5B,oBAMxD,yBAAKN,GAAG,YAAYO,MAAO,CAACC,OAAQ,SAElC,6DAGF,yBAAKR,GAAG,aACN,kDC7CYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MADF,KAGAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c432251.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { slide as Menu } from \"react-burger-menu\";\r\n\r\n\r\nfunction SliderBar() {\r\n  return (\r\n    <Menu>\r\n      <a className=\"menu-item\" href=\"/\">\r\n        È¶ñÈ†Å\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/login\">\r\n        ÁôªÂÖ•\r\n      </a>\r\n\r\n      <a className=\"menu-item\" href=\"/map\">\r\n        Âú∞Âúñ\r\n      </a>\r\n    </Menu>\r\n  );\r\n};\r\n\r\n\r\nexport default SliderBar;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport SideBar from './components/nav/nav.js'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n// import Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    position: \"fixed\",\n    top: 0,\n    width: \"100%\"\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  between:{\n\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div id=\"App\">\n      <SideBar />\n\n      <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.between}>\n          {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton> */}\n          <Typography variant=\"h6\" className={classes.title}>\n          <span role=\"img\" aria-label=\"Lizard\">ü¶é</span>CEBoss<span role=\"img\" aria-label=\"Lizard\">ü¶é</span>\n          </Typography>\n          {/* <Button color=\"inherit\">Login</Button> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n      <div id=\"page-wrap\" style={{margin: \"64px\"}}>\n        {/* <h1>ü¶éCEBossü¶é</h1> */}\n        <h2>This is my personal website!</h2>\n      </div>\n\n      <div id=\"page-wrap\">\n        <p>design for React</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}